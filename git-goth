#!/bin/bash

[ $(uname) = "Linux" ] && sedRegExp="-r" || sedRegExp="-E"

COLOR_RED()   { echo -en "\033[31m"; }
COLOR_GREEN() { echo -en "\033[32m"; }
COLOR_YELLOW(){ echo -en "\033[33m"; }
COLOR_BLUE()  { echo -en "\033[34m"; }
COLOR_RESET() { echo -en "\033[0m";  }

function latest_rc_tags()
{
	case $1 in
		-[0-9]*) limit=$1;;
		[0-9]*) limit=-$1;;
		*)      limit=-1;;
	esac
	for i in "^maintenance_201.*" "^REL_.*_RC\$"
	do
		git branch -r | tr -d \ | grep -E "$i" --color=never | tail $limit
	done #List latest RC and tags

	git branch -r | tr -d \ | grep -E "^tags/([0-9]|REL_).*\$" --color=never |
		grep '\.' | grep -vE "_RC|Fusion" | # explicit filtering to support fusion
		tail $limit
}

function get_svn_branch()
{
	# git-ref
	[ $# -gt 0 ] || set -- HEAD
	
	# find tracking branch if exists
	if [ -n "$(git config branch.$1.merge)" ]
	then
		if [ $(git config branch.$1.remote) = "." ]
		then
			git config branch.$1.merge
		else
			echo $(git config branch.$1.remote)/$(git config branch.$1.merge | sed $sedRegExp "s#^refs/(remotes|heads)/##")
		fi
		return
	fi

	local svn_remote="$(git config --get-regexp svn-remote.*\.url | cut -d' ' -f1 | sed 's#\.url$##')"
	if [ -z "$svn_remote" ]
	then
		for i do
			echo "@{upstream}"
		done
		return
	fi
	
	for i in $svn_remote
	do
		svn_url_pattern+="|$(
			git config $i.url
		)/?$(
			git config $i.fetch | cut -d: -f1 | sed 's#trunk##'
		)"
	done
	svn_url_pattern="${svn_url_pattern#?}"

	git log -1 --pretty=format:"%s%n%b" --first-parent --grep=git-svn-id $1 |
		grep git-svn-id |
		cut -d' ' -f2 |
		sed $sedRegExp "{
			s#$svn_url_pattern##
			s#@.*##
			s/^$/${GIT_SVN_ID:-git-svn}/
		}"
}

function get_git_svn_branch()
{
	for i do
		get_svn_branch $i | sed 's#^branches/##'
	done
}

function active_branch_from_log()
{
	case $1 in
		[0-9]*) count=$1;;
		*) count=20;;
	esac
	
	git log --all --pretty=format:"%d" |
		tr "(,)" " " |
		xargs printf "%s\n" |
		grep -vE "^$(
			git remote | xargs echo | sed 's# #/|^#g'
		)/|^$(
			git branch | tr -d \*\ | xargs echo | sed 's# #|^#g'
		)|^HEAD|^refs/stash" |
		head -$count
}

function svn_branch_log()
{
	COUNT=0
	for i do
		if [ $COUNT -eq 0 ] && [ "${i:0:1}" != "-" ]
		then
			COUNT=$(($COUNT + 1))
			REF="$i"
		elif [ $COUNT -gt 0 ] && [ "${i:0:1}" != "-" ]
		then
			_error "Only one branch ref allowed!"
		else
			ARGS="$ARGS $i"
		fi
	done
	set -- $ARGS

	#####
	# List total new commits in specified ref
	#
	git log --first-parent --pretty=format:"%s%n%b" $REF |
		grep git-svn-id |
		grep -v $(get_git_svn_branch $REF) |
		head -1 |
		grep -oE "@[0-9]+" |
		xargs git log --all --pretty=format:%h --grep |
		xargs printf "%s..$REF " |
		xargs git lg --first-parent $@
}

function git_log_with_svn_branch()
{
	for i in $(
		git rev-list $@
	)
	do
		# _up=$(get_git_svn_branch $i)
		# git log --graph --decorate --format='%C(yellow)%h '$(git svn find-rev $i $_up | xargs printf r%s)' %Cred'$_up' %Cred%d %Cgreen%an %Creset%s %C(cyan)%ar%Creset' $i -1
		_svn=$(git rev-list $i --max-count 1 --format=%B | grep git-svn-id | sed -E -e "s#.*/([^/]+)@([0-9]+).*#\1:r\2#")
		git log --graph --decorate --format='%C(yellow)%h %C(cyan)'$_svn'%Cred%d %Cgreen%an %Creset%s %C(cyan)%ar%Creset' $i -1		
	done
}

function non_release_jira()
{
	jira-cli --oneline WTF-1 #> /dev/null 2>&1

	#####
	# Find non-release jiras from all branches
	#
	for i in $(
		git branch -r | tr -d \ | grep -E "[A-Z]+\-[0-9]+" --color=never | grep -vE "^$(
			git remote | xargs echo | sed 's# #/|^#g'
		)/"
	)
	do
		git log --pretty=format:"%at $i %an http://jira.projectgoth.com/browse/$(
			echo $i | grep -oE "[A-Z]+\-[0-9]+" --color=never
		) $(
			jira-cli $(
				echo $i | grep -oE "[A-Z]+\-[0-9]+" --color=never | grep -v QAT
			) --format="[%status]" | tr " " _
		)%n" -1 $i
	done | column -t | sort -rn | grep -v '\[Closed\]' | grep -v '\[Open\]'

	#####	
	# Find non-release jiras from maintenance branch
	#
	time for i in $(
		git reflog $(
			git branch -r | tr -d \ | grep ^maintenance_2012 --color=never | tail -1
		) | cut -d " " -f 1
	)
	do 
		git log -1 --pretty=format:"%s" $i | grep -oE "[A-Z]+\-[0-9]+" --color=never
	done | sort -u | xargs jira-cli --oneline | grep -v Closed
}

function set_remote()
{
	remote=$1
	if [ $(git remote | grep -c ^$remote$) -eq 0 ]
	then
		echo "Remote $remote does not exist in your git config"
		exit 1
	fi
}

function push_remote()
{
	set_remote $1
	
	[ -d ~/mig33/Scripts ] || _error "Missing resource ~/mig33/Scripts"
	
	echo
	echo "Pushing new SVN branches to remote..."
	echo
	branches_to_push=$(missing_remote_branches $remote ${2:-20})
	# all_branches=$(git branch -r | tr -d \ | grep -v ^$(git remote | xargs echo | tr ' ' '|'))
	for i in $branches_to_push
	do
		echo master:$i
	done | xargs git push $remote
	for i in $branches_to_push
	do
		echo $i:$i
	done | xargs git push -f $remote trunk:master
	
	echo
	echo "Updating remote..."
	echo
	for i in $(active_branch_from_log)
	do
		echo "refs/remotes/$i:$i"
	done | xargs git push $remote
}

SVN_URL="https://svn.projectgoth.com/svn/Mig33/%s"
GIT_URL="git@frankie.indydevs.org:mig33/%s.git"
REMOTE_ORIGIN=mig33
function init_git_svn_repo()
{
	case $2 in
		'') _error "Repository name required, e.g. login.mig33.com";;
		*)  repo_name=$2;;
	esac
	case $3 in
		'') git_repo_name=$(echo $repo_name | tr '.' '_');;
		*)  git_repo_name=$3;;
	esac
	case $1 in
		clone)
			mkdir $repo_name
			cd $repo_name;;
		init) ;;
		*) _error "Clone or init only..."
	esac
	
	git svn init --stdlayout "$(printf $SVN_URL $repo_name)"
	git remote add $REMOTE_ORIGIN "$(printf $GIT_URL $git_repo_name)"
	git fetch $REMOTE_ORIGIN
	git reset --hard $REMOTE_ORIGIN/trunk
	git svn info
}

function missing_remote_branches()
{
	set_remote $1
	
	#####
	# list of SVN branches that are not available on gitorious
	#
	for i in $(active_branch_from_log $2)
	do
		if [ $(git branch -r | tr -d \ | grep -cE "^$remote/$i\$") -eq 0 ]
		then
			echo $i
		fi
	done
}	

function delete_non_svn_branches_from_remote()
{
	set_remote $1
	
	#####
	# delete gitorious merge branches
	#
	git branch -r | tr -d \ |
		grep -E "^$remote/" --color=never |
		sed "s#^$remote/##" |
		grep -vE "^$(
			git branch -r | tr -d \ |
				grep -vE "^$(
					git remote | xargs echo | sed 's# #/|^#g'
				)/" | xargs echo | sed 's# #|^#g'
			)" |
		grep -v master |
		xargs git push --delete $remote
}

function create_rc()
{
	case $1 in
		'') RC_BRANCH=$(latest_rc_tags | grep _RC --color=never);;
		new)
			shift;
			#[ $# -ge 1 ] || _error "Missing argument QAT JIRA"
			i=$(latest_rc_tags | grep RC | grep -oE '\.[0-9]+' --color=never | tr -d \.)
			RC_BRANCH=$(latest_rc_tags | grep RC | sed "s#$i#$((1+$i))#")
			[ $(echo $1 | grep -cE '[A-Z]+\-[0-9]+') -eq 1 ] || _error "Invalid QAT number"
			git config release.jira $1
			JIRA="$(git config release.jira)";
			echo "git checkout master"
			echo "git reset --hard trunk"
			echo "git svn branch $RC_BRANCH -m \"$JIRA: new RC branches/$RC_BRANCH\""
			echo "Warning: Command not completed yet"
			exit;;
		REL_[0-9.]*_RC) RC_BRANCH="$1"; shift;;
		*) _error "the given/current RC branch does not follow RC convention (e.g. REL_*_RC): $RC_BRANCH";;
	esac
	
	RC_NUMBER=$(echo $RC_BRANCH | grep -oE '[0-9\.]+' --color=never | sed 's#\.##')
	
	if [ $(echo $RC_BRANCH | grep -c -E '^REL_[0-9\.]+_RC$') -lt 1 ]
	then
		_error "the given/current RC branch does not follow RC convention (e.g. REL_*_RC): $RC_BRANCH"
	elif [ $(git branch -a | grep -c $RC_BRANCH) -lt 1 ]
	then
		_error "the given RC branch does not exist in your git index,
		run
			git svn rebase --all
		or
		run (from trunk)
			git svn branch $RC_BRANCH -m 'JIRA: new branches/$RC_BRANCH'"
	fi
	
	[ $(git branch | grep -c rel$RC_NUMBER) -lt 1 ] &&
		git checkout --track $RC_BRANCH -b rel$RC_NUMBER
	
	# move current to old if exists
	[ $(git branch | grep -c mqa$RC_NUMBER) -lt 1 ] ||
		( git branch -M mqa$RC_NUMBER mqa$RC_NUMBER.bak &&
		git rev-list -1 mqa$RC_NUMBER.bak | xargs echo mqa$RC_NUMBER backed up at )

	# create a new branch
	git checkout --track $RC_BRANCH -b mqa$RC_NUMBER
}

# Check file for PHP syntax errors
# takes a list of filenames
function php_lint()
{
	local error_count=()
	for i
	do
		# check if file exists
		# check if file ends with ".php"
		if [ -f "$i" ] && [ "${i: -4}" == ".php" ]
		then
			php -l "$i" > /dev/null
			[ $? -gt 0 ] && error_count[${#error_count[@]}]="$i"
		fi
	done

	# syntax check fails, force exit
	[ ${#error_count[@]} -gt 0 ] &&
		COLOR_RED &&
		echo "Error: ${#error_count[@]} PHP syntax error found" &&
		echo "${error_count[@]}" | tr " " '\n' &&
		COLOR_RESET &&
		exit 255

	echo -n
}

function guess_new_tag()
{
	lastRCVersion=($(latest_rc_tags |
		grep _RC |
		grep -oE "[0-9]+"
	))

	lastTagVersion=($(latest_rc_tags |
		grep tags |
		grep -oE "[0-9]+"
	))

	[ ${#lastRCVersion[@]} -eq 0 ] &&
		echo ${lastTagVersion[0]} $((${lastTagVersion[1]}+1)) | tr " " "." &&
		return

	[ ${lastRCVersion[0]} -gt ${lastTagVersion[0]} ] &&
		majorVersion=${lastRCVersion[0]} ||
		majorVersion=${lastTagVersion[0]}

	[ ${lastRCVersion[1]} -gt ${lastTagVersion[1]} ] &&
		minorVersion=${lastRCVersion[1]} ||
		minorVersion=${lastTagVersion[1]}

	[ ${lastRCVersion[1]} -gt ${lastTagVersion[1]} ] &&
		miniVersion="" ||
		miniVersion=$((${lastTagVersion[2]}+1))

	[ ${lastRCVersion[0]} -gt ${lastTagVersion[0]} ] &&
		minorVersion=${lastRCVersion[1]} &&
		miniVersion=""

	echo $majorVersion $minorVersion $miniVersion | tr " " "."
}

function create_tag()
{
	git config release.jira | xargs test -z && _error "Error: release.jira config not set, please run:

	git config release.jira <QAT-XXX>"
	SUGGESTION="REL_$(guess_new_tag)"

	# Check file for PHP syntax errors
	php_lint $(latest_rc_tags | grep tags | xargs git diff --name-only)

	case $1 in
		REL_*) TAG="$1";;
		*) read -p "Please enter SVN tag name [$SUGGESTION]: " TAG;;
	esac
	TAG=${TAG:-$SUGGESTION}
	command="
	git svn tag $TAG -m \"$(git config release.jira): tags/$TAG\""
	echo "$command"
}

function rebase_trunk()
{
	[ $(get_git_svn_branch HEAD) = "trunk" ] &&
		MERGE_FROM=$(latest_rc_tags | grep RC) ||
		MERGE_FROM="--no-jira master"
	
	git qa merge $MERGE_FROM $(git config release.jira) post release $(latest_rc_tags | grep tags)
}

function run_ant_build()
{
	cd build &&
		ant &&
		cd ../ &&
		git commit -a -m "$(git config release.jira): build files for tags/REL_$(guess_new_tag);"
}

function show_non_dcommit_hashes()
{
	git rev-list --reverse --first-parent $(get_git_svn_branch $1)..$1
}

function show_log()
{
	args=$(getopt :d:hj $*)
	set -- $args
	for i do
		case "$1" in
			-d) shift; unpushed=$(show_non_dcommit_hashes $1); shift;;
			-h) hashonly="--pretty=format:%h"; shift;;
			-j) jiraonly="--pretty=format:%s%n%b"; shift;;
			--) shift; break;;
		esac
	done
	
	if [ -n "$jiraonly" ] && [ -n "$hashonly" ]
	then
		hash2jira $@ $unpushed
	elif [ -n "$jiraonly" ]
	then
		git show --relative="#" $@ $hashonly $jiraonly $unpushed | _listjira | grep -v QAT | xargs echo
	else
		git show --relative="#" $@ $hashonly $jiraonly $unpushed
	fi
}

function _listjira()
{
	grep -oE "[A-Z]+\-[0-9]+" --color=never | sort -u
}

function hash2jira()
{
	for i in $@
	do
		git show $i --relative="#" --pretty=format:"%h $(
			git svn find-rev $i | sed 's#\([0-9][0-9]*\)#r\1#'
		) $(
			git show $i --pretty=format:"%s%n%b" --shortstat | _listjira | grep -v QAT | xargs echo
		)" | grep -v ^$
	done
}

function blame_during_merge_conflicts()
{
	for i in $(git diff --name-only | uniq)
	do
		hashes=$(git log --merge --pretty=format:"%h" $i)
		for b in $(get_git_svn_branch $hashes | uniq)
		do
			echo $i $(
				git log -1 $b --pretty=format:"%an"
			) $b:$(
				for h in $hashes
				do
					[ $(git show --pretty=format:"%s%n%b" --shortstat $h | grep -c "$b") -gt 0 ] &&
					git svn find-rev $h | xargs printf "r%s\n"
				done | xargs echo | tr ' ' ','
			)
		done
	done | column -t
}

function show_graph()
{
	git log --all --pretty=format:"%d" |
		tr "(,)" " " |
		xargs printf "%s\n" |
		grep -E "^(tags/)?([0-9]|REL_)" --color=never |
		git log --stdin --graph --decorate --pretty=format:"%d" $@ trunk
		# | grep -v '*[^(]*$' | less
}

function jira_release_tracking()
{
	for i in $@
	do
		if [ -n "$(git lg --grep=$i)" ]
		then
			echo $i merged or exist in this tree
		elif [ $(git branch -r | grep -c $i) -eq 0 ] ||
			[ -n "$(
				git branch | grep mqa --color=never |
					tr -d " *" | xargs printf "^%s\n" |
					git lg --stdin --all --grep=$i ^$(git branch -a | grep remotes/[^/]*$i --color=never | tr -d ' ') HEAD
			)" ]
		then
			jira-cli --oneline $i
			# git lg --all --grep=$i
			for h in $(git rev-list --all --grep=$i)
			do
				git log -1 --format="%h %an $(
					get_git_svn_branch $h
				)($(
					git branch --contains $h | tr -d ' ' | xargs echo | tr ' ' '|'
				)) $(
					git svn find-rev $h | xargs printf 'r%s'
				)" $h
			done | column -t
			exit
		else
			if [ -z "$(git config release.jira)" ]
			then
				_error "release.jira doesn't exist, try:
				git config release.jira QAT-XXX"
			fi
			echo git qa merge $(git branch -a | grep remotes/[^/]*$i --color=never | tr -d ' ') $(git config release.jira) mergeQA
		fi
	done
}

function scp_and_stage
{
	set_remote $1
	shift

	local refhead="$(git rev-parse --quiet --verify $1)"
	if [ -n "$refhead" ]
	then
		shift
		[ $(git branch --contains "$refhead" | grep -c '\*') -eq 0 ] &&
			_error "refhead provided is not part of current branch"
	fi

	if [ $# -ge 1 ]
	then
		list=$(git ls-files "$@")" "$(git ls-files -o "$@")
		# list=$(echo "$@" | tr ' ' "\\n")
	elif [ -n "$refhead" ]
	then
		git diff --stat $refhead
		list=$(git diff $refhead --name-only)
	else
		git diff
		list=$(git diff --name-only)
	fi

	deleted=$(for i in $list; do [ -f $i ] || echo $i; done)
	   list=$(for i in $list; do [ -f $i ] && echo $i; done)

	if [ -n "$list" ]
	then
		_TMP=${0///}
		echo "$list" > $_TMP &&
		php_lint $list &&
		echo Pushing to $remote \($(git config remote.$remote.url)\) &&
		(which dos2unix > /dev/null && dos2unix $list || echo > /dev/null) &&
		rsync -rlDv --files-from=$_TMP ./ "$(git config remote.$remote.url)/" &&
		git add $list &&
		rm $_TMP
	fi

	deleted=$(for i in $deleted; do echo $(git config remote.$remote.url | cut -d: -f2)/$i; done)

	[ -n "$deleted" ] &&
	COLOR_RED &&
	echo Deleted files &&
	ssh $(git config remote.$remote.url | cut -d: -f1) -t rm $deleted &&
	echo "$deleted"
	COLOR_RESET
}

function gitsvnrebase()
{
	local _list=()
	case "$1" in
		''|?|-h|--help|help)
			echo "Usage: ${0##/*/} --all"
			echo "Usage: all refers to current branch and with a --fetch-all option"
			echo "Example: ${0##/*/} l_trunk l_sprint"
			show_branch_status
			exit
			;;
		--all|all|--fetch-all) shift;
			_list=($(git branch | tr -d '* '))
			;;
		*)
			for i do
				git show-ref --quiet --verify -- $i &&
				_list[]=$i
			done
			;;
	esac

	local has_changes=`git stash save $0 | grep -c $0`
	local current_branch=$(git name-rev --name-only HEAD)

	echo git svn fetch --all
	git svn fetch --all
	
	for i in ${_list[@]}
	do
		_u=$(git mig33 upstream $i)
		_delta=($(
			git rev-list --count --left-right $_u...$i
		))
		if [ ${_delta[1]} -gt 0 ]
		then
			[ ${_delta[0]} -gt 0 ] &&
			echo -e "$i: \033[31m${_delta[1]} uncommitted change(s)... ${_delta[0]} upstream, rebase skipped\033[0m"
		elif [ ${_delta[0]} -gt 0 ]
		then
			if [ $i = $current_branch ]
			then
				git rebase $_u
			else
				echo Fast-forwarded $i to branches/$_u
				git branch -f $i $_u
			fi
		fi
	done
	
	[ $has_changes -gt 0 ] && git stash pop # > /dev/null 2>&1
	
	exit 0
}

function show_branch_status
{
	#####
	# unpushed local branches
	#
	( echo Branch Ref Upstream Ahead
	git for-each-ref refs/heads --format='%(refname:short) %(objectname:short) %(upstream)' |
	while read entry
	do
		i=($entry)
		git rev-list --left-right --count ${i[2]}...${i[0]} |
			xargs echo ${i[0]} ${i[1]}
	done ) | column -t
	return
}

function show_remote_status()
{
	CURRENT_BRANCH=$(git name-rev --name-only HEAD)
	if [ $# -gt 0 ]
	then
		_remotes="$@"
	else
		_remotes=$(git branch -r | grep -E "($(git remote | xargs echo | tr " " "|"))/$CURRENT_BRANCH" | grep -v "\->")
	fi
	# echo tracking $_remotes
	( echo Branch Upstream Ahead
	for _remote in $_remotes
	do
		git rev-list --left-right --count $_remote... | xargs echo $_remote
	done ) | column -t
}

function generate_trac_link()
{
	for i
	do
		git svn find-rev $i | xargs printf "https://trac.projectgoth.com/Mig33/changeset/%s\n"
	done
}

function generate_trac_link_with_file()
{
	echo $(
		generate_trac_link $1
	) $(
		git config svn-remote.svn.branches | cut -d: -f1 | cut -d/ -f1,2
	) $(
		get_git_svn_branch $1
	) $2 | tr \  /
}

function svn_cherry_pick()
{
	for ref
	do
		# check if ref is valid
		local refhead="$(git rev-parse --quiet --verify $ref)"
		[ -z "$refhead" ] && _error "Invalid reference given, ref can be either a branch name, tag, git hash or HEAD"
		[ -z "$(git svn find-rev $refhead)" ] && _error "$ref is not a SVN commit, please use \"git cherry-pick $ref\" instead"
		
		# use %B instead of %s%n%b
		# requires git version gt 1.7
		local message="r$(git svn find-rev $refhead) $(git log --pretty=format:"%an %B" -1 $refhead | grep -v git-svn-id)"
		local is_merge_commit="" && [ $(git cat-file -p $refhead | grep -cE '^parent') -gt 1 ] && is_merge_commit="-m1"
		
		git cherry-pick $is_merge_commit $refhead &&
			git commit --amend -m "$message"
	done &&
	[ $# -gt 1 ] &&
	git rebase -i HEAD~$#

}

function _usage()
{
	echo "Usage: git mig33 -h|help|?"
	echo "Usage: git mig33 edit|-e|eclipse                 # edit this script"
#	echo "Usage: git mig33 clone|init [repo_name]          # clone git svn repo"
	echo "Usage: git mig33 branch                          # Show upstream/downstream stats"
	echo "Usage: git mig33 branch last [<limit>]           # list SVN branches sorted by last updated"
	echo "Usage: git mig33 scp|stage <remote> [ref|file..] # scp and stage your files to specified remote"
#	echo "Usage: git mig33 remote cleanup <remote>         # reverse prune, deletes remote non SVN branch"
#	echo "Usage: git mig33 remote missing <remote>         # SVN branches missing from remote"
	echo "Usage: git mig33 remote                          # show remote status relative to HEAD"
	echo "Usage: git mig33 upstream|up [<ref>]             # find upstream branch"
	echo "Usage: git mig33 scp|stage <remote> [<ref>]      # show diff relative to <ref> and upload unstaged files to <remote>"
	echo "Usage: git mig33 show [-dhj]                     # -d:unpushed -h:hash-only -j:jira-only"
	echo "Usage: git mig33 rebase --all                    # stash + svn fetch + rebase all branches"
	echo "Usage: git mig33 cherry-pick|cp [<ref>..]        # customized cherry-pick for SVN"
	echo "Usage: git mig33 trac|tracf [<ref>..]            # generate Trac link"
	echo
	echo "Usage: git qa info [-limit]                      # list last RC tags or maintenance branch"
	echo "Usage: git qa graph [-limit]                     # show QA graph"
	echo "Usage: git qa unmerged [JIRA#..]                 # release jira tracking, whether a jira has been merged or release"
	echo "Usage: git qa merge <branchname> <JIRA#> [message]"
	echo "Usage: git qa blame                              # run a different variation of git log --merge"
#	echo "Usage: git qa push|dcommit <remote>              # Please do not use this!!! update local SVN to remote"
	echo
	echo "Deprecated commands:"
	echo "Usage: git mig33 log [branch]                    # log of current SVN branch"
	echo "Usage: git qa rc [new [QAT]]                     # Create new SVN branch"
	echo "Usage: git qa build                              # Run ant build"
	echo "Usage: git qa tag [REL_8.XX]                     # Generate create new SVN tag command"
	echo "Usage: git qa rebase                             # Run git qa merge to rebase from RC"

	case $1 in
		-v|verbose|--verbose) grep -A100 '^#* OPTIONS #*$' $0;;
	esac
	exit
}

function _error()
{
	[ $# -eq 0 ] && _usage && exit 0

	echo
	echo ERROR: "$@"
	echo
	exit 1
}

### OPTIONS ###
case $1 in
	''|-h|?|help|--help)  shift; _usage $@;;
	edit|-e)              vim $0;;
	eclipse)              open -a /Applications/eclipse_indigo/Eclipse.app/ $0;;
	branch|br)            shift; case $1 in
		last)             shift; active_branch_from_log $@;;
		*)                show_branch_status;;
		                  esac;;
	upstream|up)          shift; get_git_svn_branch $@;;
	info|release)         shift; latest_rc_tags $@;;
	tag|tags|rc)          _usage;; #reserved
	clone|init)           init_git_svn_repo $@;;
	remote)               shift; case $1 in
		cleanup)          shift; delete_non_svn_branches_from_remote $@;;# Destructive
		missing)          shift; missing_remote_branches $@;;
		*)                show_remote_status $@;;
		                  esac;;
	show)                 shift; show_log $@;;
	log)                  shift; svn_branch_log $@;;
	lg)                   shift; git_log_with_svn_branch $@;;
	scp|stage)            shift; scp_and_stage $@;;
	rebase)               shift; gitsvnrebase $@;;
	trac)                 shift; generate_trac_link $@;;
	tracf)                shift; generate_trac_link_with_file $@;;
	cherry-pick|cp)       shift; svn_cherry_pick $@;;
	qa)                   shift; case $1 in
		unmerged)         shift; case $1 in
			'')           non_release_jira;;
			*)            jira_release_tracking $@;;
			              esac;;
		graph)            shift; show_graph $@;;
		merge)            shift; gitsvnmerge $@;;
		blame)            shift; blame_during_merge_conflicts $@;;
		push|dcommit)     shift; push_remote $@;;
		rc)               shift; create_rc $@;;    # Destructive
		tag)              shift; create_tag $@;;   # Destructive
		rebase)           shift; rebase_trunk $@;; # Destructive
		build)            shift; run_ant_build;;
		*)                git mig33 $@;; #_error;;
		                  esac;;
	*)                    git svn $@;; #_error;;
esac;
